import '../models/source.dart';
import '../models/variant.dart';
import '../models/exposure.dart';
import '../providers/user_provider.dart';
import '../providers/analytics_provider.dart';
import '../transport/http_client.dart';

/// Configuration options for the Experiment client
class ExperimentConfig {
  /// Debug all assignment requests in the UI Debugger and log additional
  /// information to the console. This should be false for production builds.
  final bool debug;

  /// The name of the instance being initialized. Used for initializing separate
  /// instances of experiment or linking the experiment SDK to a specific
  /// instance of the amplitude analytics SDK.
  final String instanceName;

  /// The default fallback variant for all variant() calls.
  final Variant? fallbackVariant;

  /// Initial values for variants. This is useful for bootstrapping the
  /// client with fallbacks and values evaluated from server-side rendering.
  final Variants? initialVariants;

  /// Initial values for flags. This is useful for bootstrapping the
  /// client with fallbacks for flag configs.
  final String? initialFlags;

  /// Determines the primary source of variants and variants before falling back.
  final Source source;

  /// The domain from which to request variants using remote evaluation.
  final String serverUrl;

  /// The domain to request flag configurations used in local evaluation from.
  final String flagsServerUrl;

  /// The amplitude data center to fetch flags and variants from. If set,
  /// automatically sets the serverUrl and flagsServerUrl configurations.
  final String serverZone;

  /// The request timeout, in milliseconds, when fetching variants.
  final int fetchTimeoutMillis;

  /// Set to true to retry fetch requests in the background if the initial
  /// requests fails or times out.
  final bool retryFetchOnFailure;

  /// When set to true, the client will throw errors if requests fail for any
  /// reason (including timeouts, network errors, or server errors), rather than
  /// silently handling the error.
  final bool throwOnError;

  /// If true, automatically tracks exposure events through the
  /// ExperimentAnalyticsProvider. If no analytics provider is set, this
  /// option does nothing.
  final bool automaticExposureTracking;

  /// Enable or disable local evaluation flag configuration polling on start().
  final bool pollOnStart;

  /// The interval to poll local evaluation flag configurations on start().
  /// Only used if pollOnStart is true. Minimum 60000.
  final int flagConfigPollingIntervalMillis;

  /// Explicitly enable or disable calling fetch() on start():
  ///
  ///  - true:      fetch will always be called on start.
  ///  - false:     fetch will never be called on start.
  ///  - null:      fetch will always be called on start.
  final bool? fetchOnStart;

  /// If true, the ExperimentClient will automatically fetch variants when the
  /// user's identity changes. The user's identity includes user_id, device_id
  /// and any user properties which are set, unset or clearAll'ed via a call
  /// to identify().
  final bool automaticFetchOnAmplitudeIdentityChange;

  /// Sets a user provider that will inject identity information into the user
  /// for fetch() requests. The user provider will only set user fields
  /// in outgoing requests which are null or undefined.
  final ExperimentUserProvider? userProvider;

  /// Provides a analytics implementation for standard experiment events
  /// generated by the client (e.g. ExposureEvent).
  @Deprecated('Use exposureTrackingProvider instead')
  final ExperimentAnalyticsProvider? analyticsProvider;

  /// Provides the ability to track exposure events through a 3rd party analytics
  /// implementation.
  final ExposureTrackingProvider? exposureTrackingProvider;

  /// (Advanced) Use your own http client.
  final HttpClient? httpClient;

  const ExperimentConfig({
    this.debug = false,
    this.instanceName = r'$default_instance',
    this.fallbackVariant,
    this.initialVariants,
    this.initialFlags,
    this.source = Source.localStorage,
    this.serverUrl = 'https://api.lab.amplitude.com',
    this.flagsServerUrl = 'https://flag.lab.amplitude.com',
    this.serverZone = 'US',
    this.fetchTimeoutMillis = 10000,
    this.retryFetchOnFailure = true,
    this.throwOnError = false,
    this.automaticExposureTracking = true,
    this.pollOnStart = true,
    this.flagConfigPollingIntervalMillis = 300000,
    this.fetchOnStart,
    this.automaticFetchOnAmplitudeIdentityChange = false,
    this.userProvider,
    this.analyticsProvider,
    this.exposureTrackingProvider,
    this.httpClient,
  });

  /// Creates a copy of this config with the given fields replaced
  ExperimentConfig copyWith({
    bool? debug,
    String? instanceName,
    Variant? fallbackVariant,
    Variants? initialVariants,
    String? initialFlags,
    Source? source,
    String? serverUrl,
    String? flagsServerUrl,
    String? serverZone,
    int? fetchTimeoutMillis,
    bool? retryFetchOnFailure,
    bool? throwOnError,
    bool? automaticExposureTracking,
    bool? pollOnStart,
    int? flagConfigPollingIntervalMillis,
    bool? fetchOnStart,
    bool? automaticFetchOnAmplitudeIdentityChange,
    ExperimentUserProvider? userProvider,
    ExperimentAnalyticsProvider? analyticsProvider,
    ExposureTrackingProvider? exposureTrackingProvider,
    HttpClient? httpClient,
  }) {
    return ExperimentConfig(
      debug: debug ?? this.debug,
      instanceName: instanceName ?? this.instanceName,
      fallbackVariant: fallbackVariant ?? this.fallbackVariant,
      initialVariants: initialVariants ?? this.initialVariants,
      initialFlags: initialFlags ?? this.initialFlags,
      source: source ?? this.source,
      serverUrl: serverUrl ?? this.serverUrl,
      flagsServerUrl: flagsServerUrl ?? this.flagsServerUrl,
      serverZone: serverZone ?? this.serverZone,
      fetchTimeoutMillis: fetchTimeoutMillis ?? this.fetchTimeoutMillis,
      retryFetchOnFailure: retryFetchOnFailure ?? this.retryFetchOnFailure,
      throwOnError: throwOnError ?? this.throwOnError,
      automaticExposureTracking:
          automaticExposureTracking ?? this.automaticExposureTracking,
      pollOnStart: pollOnStart ?? this.pollOnStart,
      flagConfigPollingIntervalMillis: flagConfigPollingIntervalMillis ??
          this.flagConfigPollingIntervalMillis,
      fetchOnStart: fetchOnStart ?? this.fetchOnStart,
      automaticFetchOnAmplitudeIdentityChange:
          automaticFetchOnAmplitudeIdentityChange ??
              this.automaticFetchOnAmplitudeIdentityChange,
      userProvider: userProvider ?? this.userProvider,
      analyticsProvider: analyticsProvider ?? this.analyticsProvider,
      exposureTrackingProvider:
          exposureTrackingProvider ?? this.exposureTrackingProvider,
      httpClient: httpClient ?? this.httpClient,
    );
  }

  /// Get the effective server URL based on server zone
  String getServerUrl() {
    if (serverZone.toUpperCase() == 'EU') {
      return 'https://api.lab.eu.amplitude.com';
    }
    return serverUrl;
  }

  /// Get the effective flags server URL based on server zone
  String getFlagsServerUrl() {
    if (serverZone.toUpperCase() == 'EU') {
      return 'https://flag.lab.eu.amplitude.com';
    }
    return flagsServerUrl;
  }
}

/// Default configuration values
class DefaultConfig {
  static const bool debug = false;
  static const String instanceName = r'$default_instance';
  static const Source source = Source.localStorage;
  static const String serverUrl = 'https://api.lab.amplitude.com';
  static const String flagsServerUrl = 'https://flag.lab.amplitude.com';
  static const String serverZone = 'US';
  static const int fetchTimeoutMillis = 10000;
  static const bool retryFetchOnFailure = true;
  static const bool throwOnError = false;
  static const bool automaticExposureTracking = true;
  static const bool pollOnStart = true;
  static const int flagConfigPollingIntervalMillis = 300000;
  static const bool automaticFetchOnAmplitudeIdentityChange = false;
}